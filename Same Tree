Given two binary trees, write a function to check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 1.
 //similar to BFS, use queue to offer/poll node to compare
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        else if(p==null || q==null) return false;
        Queue<TreeNode> q1 = new LinkedList<TreeNode>();
        Queue<TreeNode> q2 = new LinkedList<TreeNode>();
        q1.offer(p);
        q2.offer(q);
        while(!q1.isEmpty() && !q2.isEmpty()){
            TreeNode x = q1.poll();
            TreeNode y = q2.poll();
            if(x==null &&y!=null) return false;
            if(x!=null && y==null) return false;
            if(x==null && y==null) continue;
            if(x.val!=y.val) return false; 
            q1.offer(x.left);
            q2.offer(y.left);
            q1.offer(x.right);
            q2.offer(y.right);
        }
        return true;
    }
}

2.
//recursive
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null) return true;
        else if(p==null || q==null) return false;
        if(p.val!=q.val) return false;
        return isSameTree(p.left, q.left)
            && isSameTree(p.right, q.right);
    }
}
