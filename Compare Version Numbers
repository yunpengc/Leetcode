Compare two version numbers version1 and version1.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.
You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", 
it is the fifth second-level revision of the second first-level revision.
Here is an example of version numbers ordering: 0.1 < 1.1 < 1.2 < 13.37

1.
public class Solution {
    public int compareVersion(String version1, String version2) {
        if(version1.length()==0 || version1=="") return 0;
        if(version2.length()==0 || version2=="") return 0; 
        int result1=0, result2=0;
        int a=0, b=0;
        while(a<version1.length() || b<version2.length()){
            result1=0;
            result2=0;
            while(a<version1.length() && version1.charAt(a)!='.'){
                result1 = result1*10+version1.charAt(a)-'0';
                a++;
            }
            a++;
            while(b<version2.length() && version2.charAt(b)!='.'){
                result2 = result2*10+version2.charAt(b)-'0';
                b++;
            }
            b++;
            if(result1>result2) return 1;
            else if(result1<result2) return -1;
        }
        return 0;
    }
}

2.
//recursive method
publicclass Solution{
public int compareVersion(String version1, String version2) { //java  
    if(version1.equals(version2))  
        return 0;  
          
    int first1 , first2;  
    String second1,second2;  
    if(version1.contains(".")){  
        int pos = version1.indexOf(".");  
        first1 = Integer.valueOf(version1.substring(0,pos));  
        second1 = version1.substring(pos+1,version1.length());  
    }  
    else {  
        first1 = Integer.valueOf(version1);  
        second1 = "0";  
    }  
      
    if(version2.contains(".")){  
        int pos = version2.indexOf(".");  
        first2 = Integer.valueOf(version2.substring(0,pos));  
        second2 = version2.substring(pos+1,version2.length());  
    }  
    else {  
        first2 = Integer.valueOf(version2);  
        second2 = "0";  
    }  
      
    if(first1 > first2)  
        return 1;  
    else if(first1 < first2)  
        return -1;  
    else return compareVersion(second1, second2);  
}  
}
