Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
For example: Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
1.
//time: O(n) space: O(klog n) n: number of nodes, k: number of results
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        List<Integer> item = new ArrayList<Integer>();
        if(root==null) return lists;
        item.add(root.val);
        helper(root, sum-root.val, item, lists);
        return lists;
    }
    public void helper(TreeNode node, int sum, List<Integer> item, List<List<Integer>> lists){
        if(node==null) return;
        if(sum==0 && node.left==null && node.right==null){
            lists.add(new ArrayList<Integer>(new ArrayList<Integer>(item)));
            return;
        }
        if(node.left!=null){
            item.add(node.left.val);
            helper(node.left, sum-node.left.val, item, lists);
            item.remove(item.size()-1);
        }
        if(node.right!=null){
            item.add(node.right.val);
            helper(node.right, sum-node.right.val, item, lists);
            item.remove(item.size()-1);
        }
    }
}
