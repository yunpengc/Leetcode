Rotate an array of n elements to the right by k steps.
For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
Note: Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.

1. time: O(n), space: O(n)
public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums==null || k<0 || nums.length==1) return;
        k %= nums.length;
        int[] array = new int[nums.length];
        for(int i=0;i<k;++i){
            array[i] = nums[nums.length-k+i];
        }
        for(int i=k;i<array.length;++i){
            array[i] = nums[i-k];
        }
        for(int i=0;i<nums.length;++i){
            nums[i] = array[i];
        }
    }
}

2. time: O(n), space: O(1)
public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums==null || k<=0) return;
        k %= nums.length;
        reverse(nums, 0, nums.length-k-1);
        reverse(nums, nums.length-k, nums.length-1);
        reverse(nums, 0, nums.length-1);
    }
    public void reverse(int[] nums, int start, int end){
        while(start<end){
            int temp=nums[start];
            nums[start]=nums[end];
            nums[end]=temp;
            start++;
            end--;
        }
    }
}
