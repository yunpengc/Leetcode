Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
1. Recursive approach
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        return checkSymmetric(root.left, root.right);
    }
    public boolean checkSymmetric(TreeNode node1, TreeNode node2){
        if(node1==null && node2==null) return true;
        else if(node1==null || node2==null) return false;
        else if(node1.val!=node2.val) return false;
        return checkSymmetric(node1.left, node2.right) && checkSymmetric(node1.right, node2.left);
    }
}
2. Iterative approach
// 1. level traversal. 2. push nodes onto stack, every consecutive is a pair, 
// and should either be both null or have equal value. repeat until stack is empty.
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root.right);
        stack.push(root.left);
        while(stack.size()>0){
            TreeNode left = stack.pop();
            TreeNode right = stack.pop();
            if(left==null && right==null){
                continue;
            }else if(left==null || right==null){
                return false;
            }else if(left.val!=right.val){
                return false;
            }
            stack.push(left.left);
            stack.push(right.right);
            stack.push(right.left);
            stack.push(left.right);
        }
        return true;
    }
}
