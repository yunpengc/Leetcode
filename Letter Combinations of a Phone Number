Given a digit string, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.
Input:Digit string "23"  Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

1.
// 依次读取数字，然后把数字可以代表的字符依次加到当前的所有结果中，然后进入下一次迭代。
// 假设总共有n个digit，每个digit可以代表k个字符，那么时间复杂度是O(k^n)，就是结果的数量，空间复杂度也是一样。
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        res.add("");
        if(digits==null || digits.length()==0) return res;
        for(int i=0;i<digits.length();++i){
            String letter = getString(digits.charAt(i));
            List<String> list = new ArrayList<String>();
            int size = res.size();
            for(int j=0;j<size;++j){
                for(int k=0;k<letter.length();++k){
                    list.add(res.get(j)+Character.toString(letter.charAt(k)));    
                }
            }
            res = list;
        }
        return res;
    }
    public String getString(char c){
        switch(c)
        {
            case '0':
                return " ";
            case '2':
                return "abc";
            case '3':
                return "def";
            case '4':
                return "ghi";
            case '5':
                return "jkl";
            case '6':
                return "mno";
            case '7':
                return "pqrs";
            case '8':
                return "tuv";
            case '9':
                return "wxyz";
            default:
                return "";
        }
    }
}


2.
public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        if(digits.length()==0 || digits==null){
            return res;
        }
        String[] dic = {" ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        StringBuilder sb = new StringBuilder();
        helper(digits, dic, res, 0, sb);
        return res;
    }
    public static void helper(String digits, String[] dic, List<String> res, int num, StringBuilder sb){
       if(num==digits.length()){
            res.add(sb.toString());
            return;
       }
        for(int j=0;j<dic[digits.charAt(num)-'0'].length();j++){
            sb.append(dic[digits.charAt(num)-'0'].charAt(j));
            helper(digits, dic, res, num+1, sb);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
