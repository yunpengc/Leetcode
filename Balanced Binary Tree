Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as 
a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 1.
 //time: O(n) space: O(log n)
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        if(getHeight(root)==-1) return false;
        return true;
    }
    public int getHeight(TreeNode node){
        if(node==null) return 0;
        if(node.left==null && node.right==null) return 1;
        int left = getHeight(node.left);
        if(left==-1) return -1;
        int right = getHeight(node.right);
        if(right==-1) return -1;
        if(left-right>1 || left-right<-1) return -1;
        return Math.max(left, right)+1;
    }
}
