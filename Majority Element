Given an array of size n, find the majority element. 
The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

1.
//HashMap time: O(n) space:O(n)
public class Solution {
    public int majorityElement(int[] num) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i:num){
            if(map.containsKey(i)){
                map.put(i,map.get(i)+1);
            }else{
                map.put(i,1);
            }
        }
        /*Iterator<Map.Entry<Integer, Integer>> iterator = map.entrySet().iterator();
        while(iterator.hasNext()){
            Map.Entry<Integer, Integer> entry = iterator.next();*/
        //equals to folowing sentence:
        for(Map.Entry<Integer, Integer> entry: map.entrySet()){
            if(entry.getValue()>num.length/2){
                return entry.getKey();
            }
        }
        return -1;
    }
}

2.
//HashMap
public class Solution {
    public int majorityElement(int[] num) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i:num){
            if(map.containsKey(i)){
                map.put(i,map.get(i)+1);
            }else{
                map.put(i,1);
            }
            if(map.get(i)>num.length/2){
                return i;
            }
        }
        return -1;
    }
}

3.
//java.util.Array.sort
//time: O(nlogn) space: O(n)
public class Solution {
    public int majorityElement(int[] num) {
        java.util.Arrays.sort(num);
        int mid=(num.length-1)/2;
        return num[mid];
    }
}

4.
//time: O(n), space: O(1)
//because majority elemetn > length/2, otherwise can't use the method
public class Solution {
    public int majorityElement(int[] num) {
        int currElem=0, currCount=0;
        for(int i:num){
            if(currCount==0){
                currElem = i;
                currCount = 1;
            }else{
                if(currElem==i){
                    currCount++;
                }else{
                    currCount--;
                }
            }
        }
        return currElem;
    }
}
