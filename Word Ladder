Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, 
such that: 1. Only one letter can be changed at a time 2. Each intermediate word must exist in the dictionary
For example, Given:
start = "hit", end = "cog", dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
Note: 1. Return 0 if there is no such transformation sequence. 2. All words have the same length.
3. All words contain only lowercase alphabetic characters.

1. BFS
// 先给题目进行图的映射，顶点则是每个字符串，然后两个字符串如果相差一个字符则我们进行连边。字符集只有小写字母，
// 而且字符串长度固定，假设是L。那么可以注意到每一个字符可以对应的边则有25个，那么一个字符串可能存在的边是25*L条。
// 检测这些边对应的字符串是否在字典里，就可以得到一个完整的图的结构了。等价于求这个图一个顶点到另一个顶点的最短路径，
// 用广度优先搜索即可。最坏情况是把所有长度为L的字符串都看一下，或者把字典中的字符串都看一下，
// 而长度为L的字符串总共有26^L. 时间复杂度是O(min(26^L, size(dict))，空间上也是O(min(26^L, size(dict))
public class Solution {
    public int ladderLength(String start, String end, Set<String> dict) {
        if(start==null || start.length()==0 || end==null || end.length()==0 || start.length()!=end.length()) return 0;
        LinkedList<String> queue = new LinkedList<String>();
        HashSet<String> visited = new HashSet<String>();
        int lastNum=1, currNum=0, level=1;
        queue.offer(start);
        visited.add(start);
        while(!queue.isEmpty()){
            String s = queue.poll();
            lastNum--;
            for(int i=0;i<s.length();++i){
                char[] array = s.toCharArray();
                for(char c='a';c<='z';++c){
                    array[i] = c;
                    String newS = new String(array);
                    if(newS.equals(end)){
                        return level+1;
                    }
                    if(dict.contains(newS) && !visited.contains(newS)){
                        queue.offer(newS);
                        visited.add(newS);
                        currNum++;
                    }
                }
            }
            if(lastNum==0){
                lastNum=currNum;
                currNum=0;
                level++;
            }
        }
        return 0;
    }
}
