Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.

1. time: O(n^2), space: O(n)
// brute force
public class Solution {
    public int maxProfit(int[] a) {
        if(a==null || a.length==0) return 0;
        int[] res = new int[a.length];
        res[0] = 0;
        for(int i=0;i<a.length;++i){
            for(int j=0;j<i;++j){
                if(a[i]-a[j]>res[i]){
                    res[i] = a[i]-a[j];
                }
            }
        }
        int max=0;
        for(int i:res){
            if(i>max){
                max = i;
            }
        }
        return max;
    }
}

2. time: O(n) space: O(1)
// dynamic programming. 思路是维护两个变量，一个是到目前为止最好的交易，另一个是在当前一天卖出的最佳交易。
// 递推式是local[i+1]=max(local[i]+prices[i+1]-price[i],0), global[i+1]=max(local[i+1],global[i])。
// 这样一次扫描就可以得到结果，时间复杂度是O(n)。而空间只需要两个变量，即O(1)。 
public class Solution {
    public int maxProfit(int[] a) {
        if(a==null || a.length==0) return 0;
        int local=0, global=0;
        for(int i=1;i<a.length;++i){
            local = Math.max(local+a[i]-a[i-1], 0);
            global = Math.max(local, global);
        }
        return global;
    }
}
