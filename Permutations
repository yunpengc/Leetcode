Given a collection of numbers, return all possible permutations.
For example, [1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

1.
//NP regular recursive approach
//方法还是原来那个套路，还是用一个循环递归处理子问题。区别是这里并不是一直往后推进的，前面的数有可能放到后面，
//所以我们需要维护一个used数组来表示该元素是否已经在当前结果中，因为每次我们取一个元素放入结果，
//然后递归剩下的元素，所以不会出现重复。时间复杂度还是NP问题的指数量级。
public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(num.length==0 || num==null) return lists;
        helper(num, new ArrayList<Integer>(), new boolean[num.length], lists);
        return lists;
    }
    public void helper(int[] num, List<Integer> array, boolean[] used, List<List<Integer>> lists){
        if(array.size()==num.length){
            lists.add(new ArrayList<Integer>(array));
            return;
        }
        for(int i=0;i<num.length;++i){
            if(!used[i]){
                array.add(num[i]);
                used[i] = true;
                helper(num, array, used, lists);
                array.remove(array.size()-1);
                used[i] = false;
            }
        }
    }
}
//注意在实现中有一个细节，就是在递归函数的前面，我们分别设置了used[i]的标记，表明改元素被使用，
//并且把元素加入到当前结果中，而在递归函数之后，我们把该元素从结果中移除，并把标记置为false，
//这个我们可以称为“保护现场”，递归函数必须保证在进入和离开函数的时候，变量的状态是一样的，这样才能保证正确性。
//当然也可以克隆一份结果放入递归中，但是那样会占用大量空间。所以个人认为这种做法是最高效的，而且这种方法在所有NP问题中一直用到
2.
//iterative approach
//迭代一般就是要理清每次加入一个新的元素，我们应该做什么，这里其实还是比较清晰的，
//假设有了当前前i个元素的所有permutation，当第i+1个元素加进来时，我们要做的就是将这个元素带入每一个之前的结果，
//并且放到每一个结果的各个位置中。因为之前的结果没有重复，所以带入新元素之后也不会有重复
//（当然这里假设数字集合本身是没有重复的元素的）
//因为注意第二层循环是对于res进行遍历的，而res是一直在以平方量级增长的，所以总的时间复杂度还是会是指数量级以上的。
public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(num.length==0 || num==null) return lists;
        List<Integer> first = new ArrayList<Integer>();
        first.add(num[0]);
        lists.add(first);
        for(int i=1;i<num.length;++i){
            List<List<Integer>> newLists = new ArrayList<List<Integer>>();
            for(int j=0;j<lists.size();++j){
                List<Integer> curr = lists.get(j);
                for(int k=0;k<curr.size()+1;++k){
                    List<Integer> item = new ArrayList<Integer>(curr);
                    item.add(k, num[i]);
                    newLists.add(item);
                }
            }
            lists = newLists;
        }
        return lists;
    }
}
