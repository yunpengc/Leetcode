Climbing Stairs Total Accepted: 38209 Total Submissions: 112191 My Submissions Question Solution 
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

(Equals to Fibonacci number)
1.Failed!!!(Time Limit Exceed)
//if test case is big enough, recursion approach cost much more time than loop
public class Solution {
    public int climbStairs(int n) {
        if(n<1) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        return climbStairs(n-1)+climbStairs(n-2);
    }
}

2. Iterative loop
time: O(n) space:O(n)
public class Solution {
    public int climbStairs(int n) {
        if(n<1) return 0;
        if(n==1) return 1;
        if(n==2) return 2;
        int[] array = new int[n];
        array[0] = 1;
        array[1] = 2;
        for(int i=2;i<n;++i){
            array[i] = array[i-1] + array[i-2];
        }
        return array[n-1];
    }
}

3. Improved
//no need to store each value in the process 
//time:O(n), space:O(1)
public class Solution {
    public int climbStairs(int n) {
        if(n==0 || n==1 || n==2) return n;
        int a=1, b=2, c=0;
        for(int i=0;i<n-2;++i){
            c=a+b;
            a=b;
            b=c;
        }
        return c;
    }
}
