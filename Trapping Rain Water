Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.
For example, Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

1.
//time: O(n), space: O(1)
//maintain two pointers record the max height of left and right. If leftMax<rightMax, then right is higher than left,
//so leftMax-A[left] must be trapped, rules can also be applied to the right side.
public class Solution {
    public int trap(int[] A) {
        if(A==null || A.length<2) return 0;
        int left=0, right=A.length-1, max=0, leftMax=0, rightMax=0;
        while(left<right){
            leftMax = Math.max(leftMax, A[left]);
            rightMax = Math.max(rightMax, A[right]);
            if(leftMax<rightMax){
                max += leftMax-A[left++];
            }else{
                max += rightMax-A[right--];
            }
            
        }
        return max;
    }
}
