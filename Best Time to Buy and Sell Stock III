Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.

1. dynamic programming
// 维护两种量，一个是当前到达第i天可以最多进行j次交易，最好的利润是多少（global[i][j]），另一个是当前到达第i天，
// 最多可进行j次交易，并且最后一次交易在当天卖出的最好的利润是多少（local[i][j]）。下面我们来看递推式，全局的比较简单，
// global[i][j]=max(local[i][j],global[i-1][j])，也就是去当前局部最好的，和过往全局最好的中大的那个。对于局部变量的维护，
// 递推式是local[i][j]=max(global[i-1][j-1]+max(diff,0),local[i-1][j]+diff)，第一个量是全局到i-1天进行j-1次交易，
// 然后加上今天的交易，如果今天是赚钱的话（也就是前面只要j-1次交易，最后一次交易取当前天），
// 第二个量则是取local第i-1天j次交易，然后加上今天的差值（这里因为local[i-1][j]比如包含第i-1天卖出的交易，
// 所以现在变成第i天卖出，并不会增加交易次数，而且这里无论diff是不是大于0都一定要加上，
// 因为否则就不满足local[i][j]必须在最后一天卖出的条件了）。算法时间复杂度是O(n*k)。空间上是O(k)。
public class Solution {
    public int maxProfit(int[] a) {
        if(a==null || a.length==0) return 0;
        int k = 2;
        int[] local = new int[k+1];
        int[] global = new int[k+1];
        for(int i=0;i<a.length-1;++i){
            int diff = a[i+1]-a[i];
            for(int j=k;j>0;--j){
                local[j] = Math.max(global[j-1]+Math.max(diff, 0), local[j]+diff);
                global[j] = Math.max(local[j], global[j]); 
            }
        }
        return global[k];
    }
}
