Given two sorted integer arrays A and B, merge B into A as one sorted array.
Note:
You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. 
The number of elements initialized in A and B are m and n respectively.

1. Mine 
//to move all the elements in A to the back of A (from n to m+n-1)
// then to compare from the beginning of A and B, to insert from the front of A to the end
public class Solution {
    public void merge(int A[], int m, int B[], int n) {
        if(n==0){
            return;            
        }else if(m==0){
            for(int b=0;b<n;++b){
                A[b]=B[b];
            }         
        }
        for(int a=m-1;a>=0;--a){
            A[n+a] = A[a];
        }
        int i=0;
        int j=n;
        int k=0;
        while(j<m+n && k<n){
            if(A[j]<=B[k]){
                A[i++]=A[j++];
            }else{
                A[i++]=B[k++];
            }
        }
        while(j<m+n){
            A[i++]=A[j++];
        }
        while(k<n){
            A[i++]= B[k++];
        }
    }
}

2.Improved
// to compare from the last element of each array to the first element of each array,
// each time to put the bigger one from the end of A(m+n-1) to the front
public class Solution {
    public void merge(int A[], int m, int B[], int n) {
        if(n==0){
            return;            
        }else if(m==0){
            for(int b=0;b<n;++b){
                A[b]=B[b];
            }         
        }
        int i=m-1, j=n-1, k=m+n-1;
        while(i>=0 && j>=0){
            if(A[i]>=B[j]){
                A[k--] = A[i--];
            }else{
                A[k--] = B[j--];
            }
        }
        while(i>=0){
            A[k--]=A[i--];
        }
        while(j>=0){
            A[k--]=B[j--];
        }
    }
}
