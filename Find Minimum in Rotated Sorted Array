Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
Find the minimum element.
You may assume no duplicate exists in the array.

1.Mine
//just iterate the array
public class Solution {
    public int findMin(int[] num) {
        if(num.length==0) return -1;
        if(num.length==1) return num[0];
        for(int i=0;i<num.length-1;++i){
            if(num[i]>num[i+1]){
                return num[i+1];
            }
        }
        return num[0];
    }
}

2.
//binary search
public class Solution {
    public int findMin(int[] num) {
        int left=0, right=num.length-1, mid=0;
        if(left==right || num[left]<num[right]) return num[0];
        if(left==right-1)   return num[0]>num[1]?num[1]:num[0];
        while(left<right-1){
            mid=(left+right)/2;
            if(num[left]<num[mid])  left=mid;
            if(num[right]>num[mid]) right=mid;
        }
        return Math.min(num[left], num[right]);
    }
}
