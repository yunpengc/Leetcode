Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
1.
//recursive: if root has no left or right node, can't just return 0, 
//go to the other subtree to find the nearest leaf node
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        int left=0, right=0;
        left = minDepth(root.left)+1;
        right = minDepth(root.right)+1;
        if(left==1 || right==1)
            return left>right?left:right;
        return Math.min(left, right);
    }
}

2.
//non-recursive, similar to BFS
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null && root.right==null) return 1;
        //lastNum: the number of nodes left in the queue(current level or previous level)
        //currNum: the number of nodes in the same level(next level or current level)
        int lastNum=1, currNum=0, depth=1;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();  //initialize a queue
        queue.offer(root);
        while(queue.size()>0){
            TreeNode node = queue.poll();
            lastNum--;
            if(node.left==null&&node.right==null){
                return depth;
            }
            if(node.left!=null){
                queue.offer(node.left);
                currNum++;
            }
            if(node.right!=null){
                queue.offer(node.right);
                currNum++;
            }
            if(lastNum==0){ 
            //when the previous level of nodes are all polled, begin to visit the nodes in next level,
            //they must be all in the queue, and currNum begins to record next level
                lastNum = currNum;
                currNum = 0;
                depth++;
            }
        }
        return 0;
    }
}
