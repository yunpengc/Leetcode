Given a string containing only digits, restore it by returning all possible valid IP address combinations.
For example: Given "25525511135", return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)

1. Backtracking
// 取出一个合法的数字，作为IP地址的一项，然后递归处理剩下的项。可以想象出一颗树，每个结点有三个可能的分支
//（因为范围是0-255，所以可以由一位两位或者三位组成）。并且这里树的层数不会超过四层，因为IP地址由四段组成，
// 到了之后我们就没必要再递归下去，可以结束了。这里除了上述的结束条件外，另一个就是字符串读完了。
// 可以看出这棵树的规模是固定的，时间复杂度取决于输入的规模，是指数量级的.
// 实现中需要一个判断数字是否为合法ip地址的一项的函数，首先要在0-255之间，其次前面字符不能是0。
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> list = new ArrayList<String>();
        if(s==null || s.length()==0) return list;
        helper(s, 0, 1, "", list);
        return list;
    }
    public void helper(String s, int index, int segment, String item, List<String> list){
        if(index>=s.length())
            return;
        if(segment==4){
            String str = s.substring(index);
            if(isValid(str)){
                list.add(item+"."+str);
            }
            return;
        }
        for(int i=1;i<4&&i+index<=s.length();++i){
            String str = s.substring(index, index+i);
            if(isValid(str)){
                if(segment==1){
                    helper(s, index+i, segment+1, str, list);
                }else{
                    helper(s, index+i, segment+1, item+"."+str, list);
                }
            }
        }
    }
    public boolean isValid(String s){
        if(s==null || s.length()>3) return false;
        if(s.charAt(0)=='0' && s.length()>1) return false;
        int num = Integer.parseInt(s);
        if(num>=0 && num<=255) return true;
        return false;
    }
}
