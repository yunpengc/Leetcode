Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1->2->3 which represents the number 123.
Find the total sum of all root-to-leaf numbers. For example,
    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12. The root-to-leaf path 1->3 represents the number 13. 
Return the sum = 12 + 13 = 25.
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
1.
//recursive approach
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root==null) return 0;
        return sumNumbers(root, 0);
    }
    public int sumNumbers(TreeNode node, int sum){
        if(node==null) return 0;
        if(node.left==null && node.right==null) return sum*10+node.val;
        return sumNumbers(node.left, sum*10+node.val)+sumNumbers(node.right, sum*10+node.val);
    }
}

2.
//iterative approach, time: O(n) space: O(n)
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> nodeList = new LinkedList<TreeNode>();
        Queue<Integer> intList = new LinkedList<Integer>();
        int total = 0;
        nodeList.offer(root);
        intList.offer(root.val);
        while(!nodeList.isEmpty() && !intList.isEmpty()){
            TreeNode node = nodeList.poll();
            int partial = intList.poll();
            if(node.left==null && node.right==null){
                total += partial;
            }
            if(node.left!=null){
                nodeList.offer(node.left);
                intList.offer(partial*10+node.left.val);
            }
            if(node.right!=null){
                nodeList.offer(node.right);
                intList.offer(partial*10+node.right.val);
            }
        }
        return total;
    }
}
