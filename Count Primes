Count the number of prime numbers less than a non-negative number, n.

1.
public class Solution {
    public int countPrimes(int n) {
        if(n<2){
            return 0;
        }
        int count = 0;
        for(int i=2;i<n;i++){
            if(isPrime(i)){
                count++;
            }
        }
        return count;
    }
    public boolean isPrime(int num){
        for(int i=2;i*i<=num;i++){
            if(num%i==0){
                return false;
            }
        }
        return true;
    }
}

2. using the primes in result array to test if i is a prime.
public class Solution {
    public int countPrimes(int n) {
        if(n<2){
            return 0;
        }
        if(n<3){
            return 1;
        }
        ArrayList<Integer> res = new ArrayList<Integer>();
        res.add(2);
        for(int i=3;i<n;i++){
            boolean flag = true;
            for(int j=0;j<res.size();j++){
                if(i%res.get(j)==0){
                    flag = false;
                    break;
                }
            }
            if(flag){
                res.add(i);
            }
        }
        return res.size();
    }
}

3.
// It starts from 2, the first prime, then mark the multip of 2 as true in primes, so the loop of i will skip them. 
// The next prime is 3, do the same thing. Then it is 4, which 2*2, so the not prime is true, and will skip to next.
// Time: O(nloglogn)
public class Solution {
    public int countPrimes(int n) {
        if(n<2){
            return 0;
        }
        int count = 0;
        boolean[] primes = new boolean[n];
        for(int i=2;i<n;i++){
            if(!primes[i]){
                count++;
            }
            for(int j=i;j<n;j+=i){
                primes[j] = true;
            }
        }
        return count;
    }
}
