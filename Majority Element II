Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 
The algorithm should run in linear time and in O(1) space.

1. time: O(n) space: O(1)
// 可以从Boyer Moore投票算法中得到一些启发, 观察可知，数组中至多可能会有2个出现次数超过 ⌊ n/3 ⌋ 的众数
// 记变量n1, n2为候选众数； c1, c2为它们对应的出现次数. 遍历数组，记当前数字为num
// 若num与n1或n2相同，则将其对应的出现次数加1, 否则，若c1或c2为0，则将其置为1，对应的候选众数置为num
// 否则，将c1与c2分别减1, 最后，再统计一次候选众数在数组中出现的次数，若满足要求，则返回之。
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res = new ArrayList<Integer>();
        if(nums==null || nums.length==0){
            return res;
        }
        int num1=0, num2=0, count1=0, count2=0;
        for(int i=0;i<nums.length;i++){
            int num = nums[i];
            if(num==num1){
                ++count1;
            }else if(num==num2){
                ++count2;
            }else if(count1==0){
                num1 = num;
                count1 = 1;
            }else if(count2==0){
                num2 = num;
                count2 = 1;
            }else{
                --count1;
                --count2;
            }
            
        }
        count1=0;
        count2=0;
        for(int a: nums){
            if(a==num1){
                ++count1;
            }
            if(a==num2){
                ++count2;
            }
        }
        if(count1>nums.length/3){
            res.add(num1);
        }
        if(count2>nums.length/3 && num1!=num2){
            res.add(num2);
        }
        return res;
    }
}
