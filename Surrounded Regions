Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region. For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:
X X X X
X X X X
X X X X
X O X X

1. DFS Recursive Approach (will TLE in leetcode)
// 如果使用递归，会发现LeetCode过不了，这是因为在图形中通常图片（或者说这里的矩阵）一般会很大，
// 递归很容易导致栈溢出，所以即使要用深度优先搜索，也最好使用非递归的实现方式
// All the nodes at margin of the matrix that equeals to 'O' and their neighbors that equal to 'O' will not be changed
// BFS recursive approach will be similar to DFS, except adding a queue to offer board[i][j]='O' 
// and at the margin of the matrix, then continuously find their neighbors that is also 'O'
public class Solution {
    public void solve(char[][] board) {
        if(board==null || board.length==0 || board[0].length==0) return;
        for(int i=0;i<board.length;++i){
            fill(board, i, 0);
            fill(board, i, board[0].length-1);
        }
        for(int j=0;j<board[0].length;++j){
            fill(board, 0, j);
            fill(board, board.length-1, j);
        }
        for(int i=0;i<board.length-1;++i){
            for(int j=0;j<board[0].length;++j){
                if(board[i][j]=='O') board[i][j]='X';
                if(board[i][j]=='#') board[i][j]='O';
            }
        }
    }
    public void fill(char[][] board, int i, int j){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!='O') return;
        board[i][j]='#';
        fill(board, i-1, j);
        fill(board, i+1, j);
        fill(board, i, j-1);
        fill(board, i, j+1);

    }
}

2. BFS Iterative Approach
// time: O(m*n) space: O(m+n)
public class Solution {
    public void solve(char[][] board) {
        if(board==null || board.length==0 || board[0].length==0) return;
        for(int i=0;i<board.length;++i){
            fill(board, i, 0);
            fill(board, i, board[0].length-1);
        }
        for(int j=0;j<board[0].length;++j){
            fill(board, 0, j);
            fill(board, board.length-1, j);
        }
        for(int i=0;i<board.length;++i){
            for(int j=0;j<board[0].length;++j){
                if(board[i][j]=='O') board[i][j]='X';
                if(board[i][j]=='#') board[i][j]='O';
            }
        }
    }
    public void fill(char[][] board, int i, int j){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]!='O') return;
        board[i][j]='#';
        LinkedList<Integer> queue = new LinkedList<Integer>();
        int total = i*board[0].length+j;
        queue.offer(total);
        while(!queue.isEmpty()){
            int num = queue.poll();
            int row = num/board[0].length;
            int col = num%board[0].length;
            if(row>0 && board[row-1][col]=='O'){
                queue.offer((row-1)*board[0].length+col);
                board[row-1][col]='#';
            }
            if(col>0 && board[row][col-1]=='O'){
                queue.offer(row*board[0].length+col-1);
                board[row][col-1]='#';
            }
            if(row<board.length-1 && board[row+1][col]=='O'){
                queue.offer((row+1)*board[0].length+col);
                board[row+1][col]='#';
            }
            if(col<board[0].length-1 && board[row][col+1]=='O'){
                queue.offer(row*board[0].length+col+1);
                board[row][col+1]='#';
            }
        }

    }
}
