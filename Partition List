Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
For example, Given 1->4->3->2->5->2 and x = 3, return 1->2->2->4->3->5.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
1. time: O(n), space: O(1)
// maintains two distinct lists, one stores value < x, one stores value > x. Then link them together.
public class Solution {
    public ListNode partition(ListNode head, int x) {
        if(head==null) return null;
        ListNode fake1 = new ListNode(-1);
        ListNode fake2 = new ListNode(-1);
        ListNode cur1 = fake1;
        ListNode cur2 = fake2;
        while(head!=null){
            if(head.val<x){
                cur1.next = head;
                cur1 = cur1.next;
            }else{
                cur2.next = head;
                cur2 = cur2.next;
            }
            head = head.next;
        }
        cur1.next = fake2.next;
        // For this list: 5->6->1->2, x=3, at last cur2 points to 6, cur1 points to 2
        // we must set 6->1 to 6->null, otherwise there will be a cycle.
        cur2.next = null;
        return fake1.next;
    }
}
