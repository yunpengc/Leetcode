A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).
The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).
How many possible unique paths are there?

1. the number of unique paths at [i, j] should be the sum of [i-1, j] and [i, j-1]
//recursive approach. time: O(m*n)
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m<=0 || n<=0) return 0;
        return helper(0, 0, m, n);
    }
    public int helper(int i, int j, int m, int n){
        if(i==m-1 && j==n-1) return 1;
        if(i>m-1 || j>n-1) return 0;
        return helper(i+1, j, m ,n)+helper(i, j+1, m, n);
    }
}

2.
//maintain a two dimensional array to store previous steps value
//time: O(m*n) space: O(m*n)
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m<=0 || n<=0) return 0;
        int[][] res = new int[m][n];
        for(int i=0;i<m;++i){
            res[i][0]=1;
        }
        for(int j=0;j<n;++j){
            res[0][j]=1;
        }
        for(int i=1;i<m;++i){
            for(int j=1;j<n;++j){
                res[i][j]=res[i-1][j]+res[i][j-1];
            }
        }
        return res[m-1][n-1];
    }
}

3.
//maintian a one dimensional array to store previous steps value
//time: O(m*n) space: O(n)
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m<=0 || n<=0) return 0;
        int[] res = new int[n];
        for(int i=0;i<m;++i){
            //every time make res[0]=1, equals the previous two dimensional array that first row and colume are all 1
            res[0]=1;    
            for(int j=1;j<n;++j){
                res[j] += res[j-1]; 
            }
        }
        return res[n-1];
    }
}
