Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.
/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
 
 1.
 //n个点总共构成n*(n-1)/2条直线，然后对每条直线看看是有多少点在直线上，记录下最大的那个，最后返回结果。
 //而判断一个点k在i, j构成的直线上的条件是(k.y-i.y)*(j.x-i.x)==(j.y-i.y)*(k.x-i.x)
 //time: O(n^3), space: O(1)
 public class Solution {
    public int maxPoints(Point[] points) {
        if(points.length==0 || points==null) return 0;
        int m=1;
        for(;m<points.length;++m){
            if(points[m].x==points[m-1].x && points[m].y==points[m-1].y){
                continue;
            }
            break;
        }
        if(m==points.length) return m;
        int max = 0;
        for(int i=0;i<points.length-1;++i){
            for(int j=i+1;j<points.length;++j){
                if(points[i].x==points[j].x && points[i].y==points[j].y)
                    continue;
                int curr = 2;
                for(int k=0;k<points.length;++k){
                    if(k!=i && k!=j && (points[k].x-points[i].x)*(points[j].y-points[i].y)
                        ==(points[j].x-points[i].x)*(points[k].y-points[i].y)){
                        curr++;
                    }
                }
                max = Math.max(curr, max);
            }
        }
        return max;
    }
}

2.
//hashmap  time: O(n^2) space: O(n)
//每次迭代以某一个点为基准， 看后面每一个点跟它构成的直线,维护一个HashMap,key是跟这个点构成直线的斜率的值,
//而value就是该斜率对应的点的数量， 计算它的斜率， 如果已经存在， 那么就多添加一个点， 否则创建新的key。
//这里只需要考虑斜率而不用考虑截距是因为所有点都是对应于一个参考点构成的直线， 只要斜率相同就必然在同一直线上。
//最后取map中最大的值， 就是通过这个点的所有直线上最多的点的数量。 对于每一个点都做一次这种计算， 
//并且后面的点不需要看扫描过的点的情况了， 因为如果这条直线是包含最多点的直线并且包含前面的点， 
//那么前面的点肯定统计过这条直线了。
public class Solution {
    public int maxPoints(Point[] points) {
        if(points==null || points.length==0) return 0;
        int max=1;
        for(int i=0;i<points.length-1;++i){
            HashMap<Double, Integer> map = new HashMap<Double, Integer>();
            double k = 0;
            int localMax=1, sameNum=0;
            for(int j=i+1;j<points.length;++j){
                if(points[i].x==points[j].x && points[i].y==points[j].y){
                    sameNum++;
                    continue;
                }else if(points[i].x==points[j].x){
                    k = (double) Integer.MAX_VALUE;    
                }else if(points[i].y==points[j].y){
                    k = 0;
                }else{
                    k = (double) (points[j].y-points[i].y)/(double) (points[j].x-points[i].x);
                }
                if(map.containsKey(k)){
                    map.put(k, map.get(k)+1);
                }else{
                    map.put(k,2);
                }
            }
            for(Integer value: map.values()){
                localMax = Math.max(localMax, value);
            }
            localMax += sameNum;
            max = Math.max(max, localMax);
        }
        return max;
    }
}
