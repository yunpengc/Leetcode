Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
Follow up:
Can you solve it without using extra space?

1.
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null || head.next==null) return null;
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null&&fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast==slow)
                break;
        }
        if(slow!=fast) return null;
        slow = head;
        while(slow!=null&&fast!=null){
            if(slow==fast)
                break;
            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
