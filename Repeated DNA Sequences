All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". 
When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.
Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.
For example, Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT", Return: ["AAAAACCCCC", "CCCCCAAAAA"].

1. Memory Limit Exceeds
public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> list = new ArrayList<String>();
        if(s==null || s.length()==0) return list;
        List<String> set = new ArrayList<String>();
        for(int i=0;i<s.length()-9;++i){
            String str = s.substring(i, i+10);
            if(set.contains(str) && !list.contains(str)){
                list.add(str);
            }else{
                set.add(str);    
            }
        }
        return list;
    }
}

2. HashSet + Bit Manipulation (to be seen)
// 把字符串映射为整数，对整数进行移位以及位与操作，以获取相应的子字符串。
public class Solution {  
    public List<String> findRepeatedDnaSequences(String s) {
        HashSet<Integer> first = new HashSet<Integer>();  // why using one HashMap gets MLE???
        HashSet<Integer> second = new HashSet<Integer>();
        List<String> res = new ArrayList<String>();
        char[] map = new char[26];
        map['A' - 'A'] = 0;
        map['C' - 'A'] = 1;
        map['G' - 'A'] = 2;
        map['T' - 'A'] = 3;
        for(int i = 0; i < s.length() - 9; i++) {
            int v = 0;
            for(int j = i; j < i + 10; j++) {
                v <<= 2;
                v |= map[s.charAt(j) - 'A'];
            }
            if(first.contains(v) && !second.contains(v)){
                res.add(s.substring(i, i+10));
                second.add(v);
            }else if(!first.contains(v)){
                first.add(v);
            }
        }
        return res;
    }
}  

