Given an index k, return the kth row of the Pascal's triangle.
For example, given k = 3, Return [1,3,3,1].
Note: Could you optimize your algorithm to use only O(k) extra space?

1. //the same to the Pascal's Triangle
//time: O(k*k) space: O(k*k)
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        List<Integer> list = new ArrayList<Integer>();
        if(rowIndex<0) return list;
        for(int i=0;i<rowIndex+1;++i){
            List<Integer> row = new ArrayList<Integer>();
            for(int j=0;j<i+1;++j){
                if(j==0 || j== i){
                    row.add(1);
                }else{
                    row.add(lists.get(i-1).get(j-1)+lists.get(i-1).get(j));
                }
            }
            lists.add(row);
        }
        return lists.get(rowIndex);
    }
}

2. Improved(Not Understand!!!!!!!!!!!)
//time: O(k*k) space: O(k)(best)
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> list = new ArrayList<Integer>();
        if (rowIndex < 0) return list;
        for (int i = 0; i < rowIndex + 1; i++) {
            list.add(0, 1);
            for (int j = 1; j < list.size() - 1; j++) {
                list.set(j, list.get(j) + list.get(j + 1));
            }
        }
        return list;
    }
}

3.
//Recursive method. time: O(k) space: O(k)
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> list = new ArrayList<Integer>();
        if(rowIndex<0) return list;
        if(rowIndex==0){
            List<Integer> l = new ArrayList<Integer>();
            l.add(1);
            return l;
        }
        list = getRow(rowIndex-1);
        List<Integer> row = new ArrayList<Integer>();
        for(int i=0;i<rowIndex+1;++i){
            if(i==0 || i==rowIndex){
                row.add(1);
            }else{
                row.add(list.get(i-1)+list.get(i));
            }
        }
        return row;
    }
}
