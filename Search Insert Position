Given a sorted array and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.
You may assume no duplicates in the array.
Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

1.
//just iterate the array
//time:O(n), space:O(1)
public class Solution {
    public int searchInsert(int[] A, int target) {
        if(A.length==0) return -1;
        if(target<=A[0]) return 0;
        if(target>A[A.length-1]) return A.length;
        for(int i=1;i<A.length;++i){
            if(A[i]==target)  return i;
            else if(target>A[i-1]&&target<A[i]) return i;
        }
        return -1;
    }
}

2.
//binary search
//time:O(log n), space:O(1)
public class Solution {
    public int searchInsert(int[] A, int target) {
        if(A.length==0) return -1;
        if(target<=A[0]) return 0;
        if(target>A[A.length-1]) return A.length;
        int left=0, right=A.length-1;
        int mid=(left+right)/2;
        while(left<=right){ //must contain the "=" condition
            mid=(left+right)/2;
            if(target==A[mid]){
                return mid;
            }
            if(target<A[mid]){
                right = mid-1;
            }
            if(target>A[mid]){
                left = mid+1;
            }
        }
        return left; 
    }
}
