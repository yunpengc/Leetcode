Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.

1.
//iterate the array
//time:O(n), space:O(1)
public class Solution {
    public int search(int[] A, int target) {
        if(A.length==0) return -1;
        for(int i=0;i<A.length;++i){
            if(A[i]==target){
                return i;
            }
        }
        return -1;
    }
}

2.
//binary search
//time:O(log n), space:O(1)
public class Solution {
    public int search(int[] A, int target) {
        if(A.length==0) 
            return -1;
        if(A.length==1){
            if(target==A[0])
                return 0;
            return -1;
        }
        int left=0, right=A.length-1;
        int mid=(left+right)/2;
        while(left<=right){
            mid=(left+right)/2;
            if(A[mid]==target) return mid;
            if(A[left]==target) return left;
            if(A[right]==target) return right;
            if(A[left]<A[mid]){
                if(target>A[left] && target<A[mid])
                    right=mid-1;
                else
                    left=mid+1;
            }else{
                if(target>A[mid] && target<A[right])
                    left=mid+1;
                else
                    right=mid-1;
            }
        }
        return -1;
    }
}
