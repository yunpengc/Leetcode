lone an undirected graph. Each node in the graph contains a label and a list of its neighbors.
OJ's undirected graph serialization: Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.
The graph has a total of three nodes, and therefore contains three parts as separated by #.
First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/
/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
1. BFS 
//time: O(n), space: O(n)
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null) return null;
        UndirectedGraphNode copy = new UndirectedGraphNode(node.label); 
        LinkedList<UndirectedGraphNode> queue = new LinkedList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        map.put(node, copy);
        queue.offer(node);
        while(!queue.isEmpty()){
            UndirectedGraphNode curNode = queue.poll();
            for(int i=0;i<curNode.neighbors.size();++i){
                copy = new UndirectedGraphNode(curNode.neighbors.get(i).label);
                if(!map.containsKey(curNode.neighbors.get(i))){
                    map.put(curNode.neighbors.get(i), copy); //put all neighbor nodes of curNode in map
                    queue.offer(curNode.neighbors.get(i));
                }
                map.get(curNode).neighbors.add(map.get(curNode.neighbors.get(i))); // add neighbors relationship
            }
        }
        return map.get(node);
    }
}

2. DFS recursive approach
//time: O(n), space: O(n)
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null) return null;
        UndirectedGraphNode copy = new UndirectedGraphNode(node.label);
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        map.put(node, copy);
        helper(node, map);
        return copy;
    }
    public void helper (UndirectedGraphNode node, HashMap<UndirectedGraphNode, UndirectedGraphNode> map){
        for(int i=0;i<node.neighbors.size();++i){
            if(!map.containsKey(node.neighbors.get(i))){
                map.put(node.neighbors.get(i), new UndirectedGraphNode(node.neighbors.get(i).label));
                helper(node.neighbors.get(i), map);
            }
            map.get(node).neighbors.add(map.get(node.neighbors.get(i)));
        }
        
    }
}
