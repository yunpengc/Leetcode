Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, 
with the colors in the order red, white and blue. 
Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

1. time: O(n), space: O(1)
// Maintain the starting index of 0s, 1s, and 2s at anytime. (actually, 0s will always start from index 0) 
// If next value is 0, right shift 1s and 2s, and put the 0 at proper location. 
// For shifting, we don't have to really shift the array, only 3 positions need to be changed. Similar for 1 or 2
public class Solution {
    public void sortColors(int[] A) {
        if(A==null || A.length==0) return;
        int i=-1, j=-1, k=-1;
        for(int p=0;p<A.length;++p){
            if(A[p]==0){
                A[++k] = 2;
                A[++j] = 1;
                A[++i] = 0;
            }else if(A[p]==1){
                A[++k] = 2;
                A[++j] = 1;
            }else{
                A[++k] = 2;
            }
        }
    }
}

2. Counting Sort
// 总共进行了三次扫描，如果不需要in-place的结果只需要两次扫描。需要用到元素只有0,1,2, 
// 我们知道helper[i]中是包含着0,1,2的元素数量，我们只需要按照helper[0,1,2]的数量依次赋值过来即可
// 每层循环把helper[i]--，如果helper[i]到0就i++就可以了.时间复杂度是O(2*n)，空间是O(k)，k是颜色的数量。
public class Solution {
    public void sortColors(int[] A) {
        if(A==null || A.length==0) return;
        int[] res = new int[A.length];
        int[] helper = new int[3];
        for(int i=0;i<A.length;++i){
            helper[A[i]]++;
        }
        for(int i=1;i<3;++i){
            helper[i] = helper[i]+helper[i-1];
        }
        for(int i=A.length-1;i>=0;--i){
            res[helper[A[i]]-1] = A[i];
            helper[A[i]]--;
        }
        for(int i=0;i<A.length;++i){
            A[i] = res[i];
        }
    }
}
