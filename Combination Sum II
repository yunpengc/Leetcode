Given a collection of candidate numbers (C) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.
Each number in C may only be used once in the combination.
Note: All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 

1.
// same to I
public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();
        if(num.length==0 || num==null) return lists;
        java.util.Arrays.sort(num);
        recurse(num, target, new ArrayList<Integer>(), lists, 0);
        return lists;
    }
    public void recurse(int[] num, int target, ArrayList<Integer> array, List<List<Integer>> lists, int index){
        if(target==0){
            lists.add(new ArrayList<Integer>(array));
            return;
        }
        if(target<0 || index>=num.length) return;

        for(int i=index;i<num.length;++i){
            if(i>index && num[i]==num[i-1]) continue; // skip the duplicated path?????
            array.add(num[i]);
            recurse(num, target-num[i], array, lists, i+1);
            array.remove(array.size()-1); // roll back after use it
        }
    }
}
