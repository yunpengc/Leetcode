Given a m x n grid filled with non-negative numbers, 
find a path from top left to bottom right which minimizes the sum of all numbers along its path.
Note: You can only move either down or right at any point in time.

1.
//maintain a two dimensional array (use it as a two dimensional array) to store the previous steps value
//time: O(m*n) space: O(m*n)
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null || grid.length==0 || grid[0].length==0) return 0;
        int[][] res = new int[grid.length][grid[0].length];
        res[0][0]=grid[0][0];
        for(int i=1;i<grid.length;++i){
            res[i][0] = res[i-1][0]+grid[i][0];
        }
        for(int j=1;j<grid[0].length;++j){
            res[0][j] = res[0][j-1]+grid[0][j]; 
        }
        for(int i=1;i<grid.length;++i){
            for(int j=1;j<grid[0].length;++j){
                res[i][j] = Math.min(res[i-1][j], res[i][j-1])+grid[i][j];
            }
        }
        return res[grid.length-1][grid[0].length-1];
    }
}

2.
//maintain a one dimensional array (use it as a two dimensional array) to store the previous steps value
//time: O(m*n) space: O(n)
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null || grid.length==0 || grid[0].length==0) return -1;
        int[] res = new int[grid[0].length];
        res[0]=grid[0][0];
        for(int j=1;j<grid[0].length;++j){
            res[j]= grid[0][j]+res[j-1];  // to store value of the first row 
        }
        for(int i=1;i<grid.length;++i){
            for(int j=0;j<grid[0].length;++j){
                if(j==0){
                    res[j] += grid[i][0]; // to store each value of the first column
                }else{
                    //the path sum at [i, j] is the min([i, j-1], [i-1, j])+[i,j]
                    res[j] = Math.min(res[j], res[j-1])+grid[i][j]; 
                }
            }
        }
        return res[grid[0].length-1];
    }
}
