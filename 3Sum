Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Note: Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.

1.
//这道题一般使用排序之后夹逼的方法，总的时间复杂度为O(n^2+nlogn)=(n^2),空间复杂度是O(n).
public class Solution {
    public List<List<Integer>> threeSum(int[] num) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(num==null || num.length<3) return res;
        java.util.Arrays.sort(num);
        if(num[0]+num[1]>0 || num[num.length-2]+num[num.length-1]<0) return res;
        for(int i=num.length-1;i>=2;--i){
            if(i<num.length-1 && num[i]==num[i+1]) continue;
            List<List<Integer>> curRes = helper(num, i-1, -num[i]);// from end to start, as for num[i], find two sum is -num[i]
            for(int j=0;j<curRes.size();++j){
                curRes.get(j).add(num[i]); // as for every corresponding two sum, add num[i] to it, make 3 sum as 0
            }
            res.addAll(curRes);
        }
        return res;
    }
    public List<List<Integer>> helper(int[] num, int end, int target){
        int left=0, right=end;
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        while(left<right){
            if(num[left]+num[right]==target){
                List<Integer> curList = new ArrayList<Integer>();
                curList.add(num[left]);
                curList.add(num[right]);
                list.add(curList);
                left++;
                right--;
                while(left<right && num[left]==num[left-1]){
                    left++;
                }
                while(left<right && num[right]==num[right+1]){
                    right--;
                }
            }else{
                if(num[left]+num[right]>target){
                    right--;
                }else if(num[left]+num[right]<target){
                    left++;
                }
            }
        }

        return list;
    }
}
