Given a singly linked list L: L0→L1→…→Ln-1→Ln, reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…
You must do this in-place without altering the nodes' values.
For example, Given {1,2,3,4}, reorder it to {1,4,2,3}.
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
1. time: O(n), space: O(n)
// using stack to store the last half nodes in the linkedlist
public class Solution {
    public void reorderList(ListNode head) {
        if(head==null || head.next==null) return;
        LinkedList<ListNode> stack = new LinkedList<ListNode>();
        ListNode walker = head;
        ListNode runner = head;
        while(runner.next!=null && runner.next.next!=null){
            walker = walker.next;
            runner = runner.next.next;
        }
        ListNode temp = walker.next;
        walker.next = null;
        while(temp!=null){
            stack.push(temp);
            temp = temp.next;
        }
        while(head!=null){
            ListNode next = head.next;
            if(!stack.isEmpty()){
                ListNode root = stack.pop();
                head.next = root;
                root.next = next;
            }
            head = next;
        }
    }
}

2. time: O(n), space: O(1)
// 将链表切成两半，也就是找到中点，然后截成两条链表；将后面一条链表进行反转操作；将两条链表按顺序依次merge起来。
public class Solution {
    public void reorderList(ListNode head) {
        if(head==null || head.next==null) return;
        ListNode walker = head;
        ListNode runner = head;
        while(runner.next!=null && runner.next.next!=null){
            walker = walker.next;
            runner = runner.next.next;
        }
        ListNode head1 = head;
        ListNode head2 = walker.next;
        walker.next = null;
        head2 = reverse(head2);
        while(head1!=null && head2!=null){
            ListNode next = head2.next;  // reserve head2.next, not head1
            head2.next = head1.next;
            head1.next = head2;
            head1 = head2.next;
            head2 = next;
        }
    }
    public ListNode reverse(ListNode head){
        ListNode pre = null;
        ListNode cur = head;
        while(cur!=null){
            ListNode next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
}
