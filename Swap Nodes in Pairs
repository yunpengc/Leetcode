Given a linked list, swap every two adjacent nodes and return its head.
For example, Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
1.
// 每次跳两个节点，后一个接到前面，前一个接到后一个的后面，最后现在的后一个（也就是原来的前一个）,
// 接到下下个结点（如果没有则接到下一个）.时间复杂度明显是O(n)，空间复杂度是O(1)
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null) return null;
        ListNode fake = new ListNode(-1);
        fake.next = head;
        ListNode pre = fake;
        ListNode curr = head;
        while(curr!=null && curr.next!=null){
            ListNode next = curr.next.next;
            curr.next.next = curr;
            pre.next = curr.next;
            if(next!=null && next.next!=null){
                curr.next = next.next;
            }else{
                curr.next = next;
            }
            pre = curr;
            curr = next;
        }
        return fake.next;
    }
}
