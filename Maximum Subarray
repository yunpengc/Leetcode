Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

1. 
// Kadane - dynamic programming
public class Solution {
    public int maxSubArray(int[] A) {
        if(A.length==0) return -1;
        int sum = 0;
        int max = Integer.MIN_VALUE;
        for(int i=0;i<A.length;++i){
            if(sum<0){
                sum=0;
            }
            sum += A[i];
            max = Math.max(sum, max);
        }
        return max;
    }
}

2. 
//divide and conquer
public class Solution {
    public int maxSubArray(int[] A) {
        if(A.length==0) return 0;
        return divide(A, 0, A.length-1);
    }
    public int divide(int[] A, int a, int b){
        if(a==b) return A[a];
        int mid = (a+b)/2;
        int lmax = divide(A, a, mid);
        int rmax = divide(A, mid+1, b);
        int rightMax=A[mid+1], leftMax = A[mid];
        int temp=0, tmp=0;
        for(int i=mid;i>=a;--i){
            temp += A[i]; 
            if(temp>leftMax) leftMax = temp;
        }
        for(int j=mid+1;j<=b;++j){
            tmp += A[j];
            if(tmp>rightMax) rightMax = tmp;
        }
        return Math.max(Math.max(lmax, rmax), (leftMax+rightMax));
    }
}
