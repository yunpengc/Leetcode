Given a linked list, remove the nth node from the end of list and return its head.
For example,
   Given linked list: 1->2->3->4->5, and n = 2.
   After removing the second node from the end, the linked list becomes 1->2->3->5.

1.
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || n<0){
            return null;
        }
        ListNode pre = new ListNode(-1);
        pre.next = head;
        ListNode slow = pre;
        ListNode fast = pre;
        for(int i=0;i<n;i++){
            fast = fast.next;
        }
        while(fast.next!=null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next==null?null:slow.next.next;
        return pre.next;
    }
}

2.
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || head.next==null) return null;
        ListNode tmp = head;
        int len = getHeight(tmp);
        if(n>len) return null;
        if(n==len) return tmp.next;
        for(int i=0;i<len-n-1;++i){
            tmp = tmp.next;
        }
        tmp.next = tmp.next.next;
        return head;
    }
    public int getHeight(ListNode node){
        int len = 1;
        while(node.next!=null){
            node = node.next;
            len++;
        }
        return len;
    }
}
