Given a sorted array of integers, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].
For example, Given [5, 7, 7, 8, 8, 10] and target value 8, return [3, 4].

1.
//binary search
//time:O(log n)
public class Solution {
    public int[] searchRange(int[] A, int target) {
        int[] res={-1, -1};
        if(A.length==0 || A==null) return res;
        int l=0, r=A.length-1;
        while(l<=r){
            int mid=(l+r)/2;
            if(target>A[mid]){
                l=mid+1;
            }else{
                r=mid-1;
            }
        }
        int ll=0, rr=A.length-1;
        while(ll<=rr){
            int mid=(ll+rr)/2;
            if(target<A[mid]){
                rr=mid-1;
            }else{
                ll=mid+1;
            }
        }
        if(l<=rr){
            res[0]=l;
            res[1]=rr;
        }
        return res;
    }
}
