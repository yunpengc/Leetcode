Given an array S of n integers, find three integers in S such that the sum is closest to a given number, 
target. Return the sum of the three integers. You may assume that each input would have exactly one solution.
For example, given array S = {-1 2 1 -4}, and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

1.
//time: O(n^2) space: O(1)
//similar to 3 Sum, if no sum equals to target, find the nearest one by comparing to find the smallest different sum
public class Solution {
    public int threeSumClosest(int[] num, int target) {
        if(num==null || num.length<3) return -1;
        int min = Integer.MAX_VALUE/2;
        java.util.Arrays.sort(num);
        for(int i=0;i<num.length;++i){
            int left=i+1, right=num.length-1;
            while(left<right){
                int sum = num[i]+num[left]+num[right];
                if(sum==target){
                    return target;
                }else if(sum>target){
                    if(Math.abs(sum-target)<Math.abs(min-target)){
                        min = sum;
                    }
                    right--;
                }else{
                    if(Math.abs(sum-target)<Math.abs(min-target)){
                        min = sum;
                    }
                    left++;
                }
            }
        }
        return min;
    }
}
