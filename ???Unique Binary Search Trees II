Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.
For example, Given n = 3, your program should return all 5 unique BST's shown below.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; left = null; right = null; }
 * }
 */
 1.
 //每次一次选取一个结点为根，然后递归求解左右子树的所有结果，最后根据左右子树的返回的所有子树，
 //依次选取然后接上（每个左边的子树跟所有右边的子树匹配，而每个右边的子树也要跟所有的左边子树匹配，
 //总共有左右子树数量的乘积种情况），构造好之后作为当前树的结果返回。
 public class Solution {
    public List<TreeNode> generateTrees(int n) {
        return helper(1, n);
    }
    public List<TreeNode> helper(int left, int right){
        List<TreeNode> list = new ArrayList<TreeNode>();
        if(left>right){
            list.add(null);
            return list;
        }
        for(int i=left;i<=right;++i){
             List<TreeNode> leftList = helper(left, i-1);
             List<TreeNode> rightList = helper(i+1, right);
             for(int j=0;j<leftList.size();++j){
                 for(int k=0;k<rightList.size();++k){
                     TreeNode root = new TreeNode(i);
                     root.left = leftList.get(j);
                     root.right = rightList.get(k);
                     list.add(root);
                 }
             }
        }
        return list;
    
   
