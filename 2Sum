Given an array of integers, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, 
where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution.
Input: numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2

1. HashMap
//time: O(n), space: O(n)
public class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        if(numbers.length==0 ||numbers==null) return result;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i=0;i<numbers.length;++i){
            if(map.containsKey(target-numbers[i])){
                int value = map.get(target-numbers[i]);
                result[0] = value+1;
                result[1] = i+1;
            }else{
                map.put(numbers[i], i);
            }
        }
        return result;
    }
}

2.
// 先对数组进行排序，然后使用夹逼的方法找出满足条件的pair，原理是因为数组是有序的，那么假设当前结果比target大，
// 那么左端序号右移只会使两个数的和更大，反之亦然。所以每次只会有一个选择，从而实现线性就可以求出结果。
// 该算法的时间复杂度是O(nlogn+n)=O(nlogn)，空间复杂度取决于排序算法。
public int[] twoSum(int[] numbers, int target) {  
    int[] res = new int[2];  
    if(numbers==null || numbers.length<2)  
        return null;  
    Arrays.sort(numbers);  
    int l = 0;  
    int r = numbers.length-1;  
    while(l<r)  
    {  
        if(numbers[l]+numbers[r]==target)  
        {  
            res[0] = number[l];  
            res[1] = number[r];  
            return res;  
        }  
        else if(numbers[l]+numbers[r]>target)  
        {  
            r--;  
        }  
        else  
        {  
            l++;  
        }  
    }  
    return null;  
}  
