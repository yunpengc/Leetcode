Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
For example, Given n = 3, there are a total of 5 unique BST's.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
   1.
   //all n nodes can be the root, e.g. when 1 is the root, there is 0 node on the left and n-1 nodes on the right
   //e.g. for n=3, when 1 as root, 0 left and two right, there are two unique BST; when 2 as root, 1 left and 1 right,
   //there is one unique BST; when 3 as root, 2 left and 0 right, there are two unique BST, so the result is 5.
   public class Solution {
    public int numTrees(int n) {
        if(n==1 || n==0) return 1;
        int[] res = new int[n+1];
        res[0] = 1;
        res[1] = 1;
        res[2] = 2;
        for(int i=3;i<=n;++i){
            for(int j=1;j<=i;++j){
                res[i] += res[j-1]*res[i-j];
            }
        }
        return res[n];
    }
}
