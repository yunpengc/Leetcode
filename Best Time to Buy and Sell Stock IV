Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most k transactions.
Note: You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).


public class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null || prices.length==0){
            return 0;
        }
        if(k>prices.length/2){
            return helper(prices);
        }
        int[] local = new int[k+1];
        int[] global = new int[k+1];
        for(int i=0;i<prices.length-1;i++){
            int diff = prices[i+1] - prices[i];
            for(int j=k;j>0;j--){
                local[j] = Math.max(global[j-1]+Math.max(diff, 0), local[j]+diff);
                global[j] = Math.max(global[j], local[j]);
            }
        }
        return global[k];
    }
    public int helper(int[] a){
        int local=0, global=0;
        for(int i=1;i<a.length;++i){
            if(a[i]>a[i-1]){
                local = a[i]-a[i-1];
                global += local;
            }
        }
        return global;
    }
}
