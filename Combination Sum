Given a set of candidate numbers (C) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T.
The same repeated number may be chosen from C unlimited number of times.
Note: All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is:[7]  [2, 2, 3] 

1.
//Time: O(n*m), where n is size of candidate set, and m == target. Space: O(m) due to stack frames
//基本思路是先排好序，然后每次递归中把剩下的元素一一加到结果集合中，并且把目标减去加入的元素，
//然后把剩下元素（包括当前加入的元素）放到下一层递归中解决子问题。算法复杂度因为是NP问题，所以自然是指数量级的。
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> lists = new LinkedList<List<Integer>>();
        Arrays.sort(candidates);
        List<Integer> a = new ArrayList<Integer>();
        recurse(candidates, target, a, 0, lists);
        return lists;
    }
    public void recurse(int[] candidates, int target, List<Integer> array, int index, List<List<Integer>> lists){
        if(target<0) return;
        if(target==0){
            lists.add(new ArrayList<Integer>(array));
            return;
        }
        for(int i=index;i<candidates.length;++i){
            if(i>0 && candidates[i]==candidates[i-1]) continue;
            array.add(candidates[i]);
            recurse(candidates, target-candidates[i], array, i, lists);
            array.remove(array.size()-1);  // roll back after use it
        }
    }
}
