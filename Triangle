Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.
For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

1. time: O(n^2) space: O(n)
// 维护到某一个元素的最小路径和，那么在某一个元素i，j的最小路径和就是它下层对应的相邻两个元素的最小路径和加上自己的值，
public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size()==0){
            return 0;
        }
        int[] res = new int[triangle.size()+1];
        for(int i=triangle.size()-1;i>=0;i--){
            for(int j=0;j<triangle.get(i).size();j++){
                res[j] = Math.min(res[j], res[j+1])+triangle.get(i).get(j);
            }
        }
        return res[0];
    }
}

2.
public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size()==0){
            return 0;
        }
        int[][] res = new int[triangle.size()][triangle.size()+1];
        for(int i=0;i<triangle.size();i++){
            res[triangle.size()-1][i] = triangle.get(triangle.size()-1).get(i);
        }
        for(int i=triangle.size()-2;i>=0;i--){
            for(int j=0;j<triangle.get(i).size();j++){
                res[i][j] = Math.min(res[i+1][j], res[i+1][j+1])+triangle.get(i).get(j);
            }
        }
        return res[0][0];
    }
}

3. time: O(n^2) space: O(1)
// 1) Go from bottom to top. 2) We start form the row above the bottom row [size()-2].
// 3) Each number add the smaller number of two numbers that below it.
// 4) And finally we get to the top we the smallest sum.
public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        for(int i = triangle.size() - 2; i >= 0; i--)
            for(int j = 0; j <= i; j++)
                triangle.get(i).set(j, triangle.get(i).get(j) + Math.min(triangle.get(i + 1).get(j), triangle.get(i + 1).get(j + 1)));
        return triangle.get(0).get(0);
    }
}
