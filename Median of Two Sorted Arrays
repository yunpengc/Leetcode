There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. 
The overall run time complexity should be O(log (m+n)).

1.
// 问题等价于求两个array的第k=(m+n)/2（假设m和n分别是两个数组的元素个数）大的数是多少。
// 基本思路是每次通过查看两个数组的第k/2大的数(假设是A[k/2],B[k/2])，如果两个A[k/2]=B[k/2]，
// 说明当前这个数即为两个数组剩余元素的第k大的数，如果A[k/2]>B[k/2], 那么说明B的前k/2个元素都不是我们要的第k大的数，
// 反之则排除A的前k/2个，如此每次可以排除k/2个元素，最终k=1时即为结果。
// 总的时间复杂度为O(logk),空间复杂度也是O(logk)，即为递归栈大小。在这个题目中因为k=(m+n)/2,所以复杂度是O(log(m+n))。
public class Solution {
    public double findMedianSortedArrays(int a[], int b[]) {
        if(a==null && b==null) return -1;
        if((a.length+b.length)%2==1){
            return (double) helper(a, 0, a.length-1, b, 0, b.length-1, (a.length+b.length)/2+1);
        }else{
            double x = helper(a, 0, a.length-1, b, 0, b.length-1, (a.length+b.length)/2);
            double y = helper(a, 0, a.length-1, b, 0, b.length-1, (a.length+b.length)/2+1);
            return (x+y)/2;
        }
    }
    public int helper(int a[], int startA, int endA, int b[], int startB, int endB, int k){
        int m = endA-startA+1;
        int n = endB-startB+1;
        if(m>n){
            return helper(b, startB, endB, a, startA, endA, k);
        }
        if(m==0){
            return b[startB+k-1];
        }
        if(k==1){
            return Math.min(a[startA], b[startB]);
        }
        int posA = Math.min(k/2, m);
        int posB = k - posA;
        if(a[startA+posA-1]==b[startB+posB-1]){
            return a[startA+posA-1];
        }else if(a[startA+posA-1]>b[startB+posB-1]){
            return helper(a, startA, startA+posA-1, b, startB+posB, endB, k-posB);
        }else{
            return helper(a, startA+posA, endA, b, startB, startB+posB-1, k-posA);
        }
    }
}
