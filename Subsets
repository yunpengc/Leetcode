Given a set of distinct integers, S, return all possible subsets. Note:
Elements in a subset must be in non-descending order. The solution set must not contain duplicate subsets.
For example, If S = [1,2,3], a solution is:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

1.
// firstly add null array to result list, then add each integer in S to result list one by one until nothing left in S
// NP Question
public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        list.add(new ArrayList<Integer>());
        if(S==null || S.length==0) return list;
        Arrays.sort(S);
        for(int i=0;i<S.length;++i){
            int size = list.size(); // cannot just use list.size() in for loop. why???????????
            for(int j=0;j<size;++j){
                 List<Integer> array = new ArrayList<Integer>(list.get(j));
                 array.add(S[i]);
                 list.add(array);
            }
        }
        return list;
    }
}

2. Recursive approach
//
public class Solution {
    public List<List<Integer>> subsets(int[] S) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        list.add(new ArrayList<Integer>());
        if(S==null || S.length==0) return list;
        Arrays.sort(S);
        helper(S, 0, new ArrayList<Integer>(), list);
        return list;
    }
    public void helper(int[] S, int start, List<Integer> array, List<List<Integer>> list){
        for(int i=start;i<S.length;++i){
            array.add(S[i]);
            list.add(new ArrayList<Integer>(array));
            helper(S, i+1, array, list);
            array.remove(array.size()-1);
        }
    }
}
