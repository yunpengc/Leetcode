Given a singly linked list, determine if it is a palindrome.
Follow up: Could you do it in O(n) time and O(1) space?

1. Reverse the second half of the linked list
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next!=null && fast.next.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        ListNode next = slow.next;
        slow.next = null;
        ListNode head2 = reverse(next);
        ListNode head3 = head;
        while(head2!=null){
            if(head3.val!=head2.val){
                return false;
            }
            head3 = head3.next;
            head2 = head2.next;
        }
        return true;
    }
    public ListNode reverse(ListNode head){
        if(head==null || head.next==null){
            return head;
        }
        ListNode newHead = head;
        ListNode secondElem = head.next;
        head.next = null;
        ListNode reverseHead = reverse(secondElem);
        secondElem.next = head;
        return reverseHead;
    }
}
